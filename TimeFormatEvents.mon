/*
 * $Copyright (c) 2015, 2016 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 * Event definitions for providing a set of functions to assist with date and time formatting.
 * 
 */

package com.apama.correlator.timeformat;

/** 
 * An event providing a time-parser object that you can then use 
 * to make multiple calls using its <tt>parseTime()</tt> function, specifying
 * the date/time string to be parsed. 
 * 
 * Reusing a <tt>CompiledPattern</tt> object is significantly more efficient than 
 * providing the same time pattern (<tt>format</tt>) in multiple calls to parse 
 * functions defined on the <tt>TimeFormat</tt> event object.
 */
event CompiledPattern {
	/** @private*/ import "TimeFormatPlugin" as __plugin;
	/** @private*/ wildcard chunk __c;
	
	/**
	 * Parses the <tt>timeDate</tt> string according to the format provided
	 * by this time/date parser event object returning the result 
	 * as a <tt>float</tt> of seconds since the epoch, or <tt>NaN</tt> 
	 * if it cannot parse the specified string. 
	 *
	 * For more information about the return value, see the description of 
	 * "Time Format plug-in parse functions" in "Developing Apama Applications."
	 *
	 * @param timeDate String that represents a time and/or a date.
	 * @returns The resulting value of seconds since the epoch.
	 */
	action parseTime(string timeDate) returns float 
	{
		return __plugin.parseTimeFromPattern(__c, timeDate);
	}	
}

/** 
 * An event object providing a set of functions to assist with date and 
 * time formatting.
 */
event TimeFormat
{
	// Public
	
	/** 
	 * Converts the <tt>time</tt> parameter to the local time and returns 
	 * that time in the format specified.
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	static action format(float time, string format) returns string 
	{
		return __plugin.format(time, format);
	}
	
	/** 
	 * Converts the <tt>time</tt> parameter to the local time and returns 
	 * that time in the format specified. 
	 *
	 * The <tt>formatUTC()</tt> function always returns UTC (GMT no matter 
	 * what the local time is).
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	static action formatUTC(float time, string format) returns string 
	{
		return __plugin.formatUTC(time, format);
	}
	
	/** 
	 * Converts the <tt>time</tt> parameter, which is UTC, to the time in the time
	 * zone you specify and returns that time in the format you specify.
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @param tzName String that specifies the name of a time zone.
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	static action formatWithTimeZone(float time, string format, string tzName) returns string 
	{
		return __plugin.formatWithTimeZone(time, format, tzName);
	}

	/**
	 * Returns the local time as a float of seconds since the epoch (UTC).
	 * 
	 * This value has the same format as the <tt>currentTime</tt> variable. However, 
	 * the <tt>getTime()</tt> function returns the actual local time whereas the <tt>currentTime</tt> 
	 * variable contains the time that the event being processed was received by the 
	 * correlator. The time returned by the <tt>getTime()</tt> function is accurate to the
	 * millisecond except on Windows. On Windows, it returns a time that is accurate to 
	 * within 10 or 16 milliseconds depending on the machine configuration and Windows 
	 * version it is running on. 
	 * 
	 * <i>The Windows and UNIX versions of the Time Format plug-in are not guaranteed to return 
	 * the same time all the time. This is because the underlying system libraries that the plug-in 
	 * relies on have different interpretations of what constitutes local time in certain country 
	 * locales, in particular during summer time. This discrepancy is caused by the fact that at the 
	 * epoch, January 1st 1970, Great Britain was temporarily one hour ahead of UTC. Some UNIX system 
	 * libraries, like those on Solaris, account for this, others, like that on Windows, do not.</i>
	 *
	 * @returns The local time as a float of seconds since the epoch (UTC).
	 */
	static action getSystemTime() returns float 
	{
		return __plugin.getTime();	
	}
		
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting it as a date and time in the local timezone. 
	 *
	 * The function returns the resulting value as a <tt>float</tt> of 
	 * seconds since the epoch, or <tt>NaN</tt> if it cannot parse the 
	 * specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTime("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @returns The resulting value of seconds since the epoch.
	 */
	static action parseTime(string format, string timeDate) returns float 
	{
		return __plugin.parseTime(format, timeDate);
	}
	
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting the <tt>timeDate</tt> as a UTC date and time. 
	 * 
	 * The returned value is a <tt>float</tt> of seconds since the epoch, or 
	 * <tt>NaN</tt> if it cannot parse the specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTimeUTC("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @returns The resulting value of seconds since the epoch.
	 */	
	static action parseTimeUTC(string format, string timeDate) returns float 
	{
		return __plugin.parseTimeUTC(format, timeDate);
	}	
	
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting it as a date and time in the named timezone specified
	 * by the <tt>tzName</tt> parameter. 
	 *
	 * The function returns the resulting value as a <tt>float</tt> of seconds 
	 * since the epoch, or <tt>NaN</tt> if it cannot parse the specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTimeWithTimeZone("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56", "Europe/London");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @param tzName String that specifies the name of a time zone.
	 * @returns The resulting value of seconds since the epoch.
	 */
	static action parseTimeWithTimeZone(string format, string timeDate, string tzName) returns float 
	{
		return __plugin.parseTimeWithTimeZone(format, timeDate, tzName);
	}	
	
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the local date/time string to be parsed. 
	 *
	 * You can use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object 
	 * returned by the <tt>compilePattern()</tt> function to make multiple calls using its 
	 * <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePattern(pattern);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePattern()</tt> function and then the <tt>CompiledPattern</tt> object's
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePattern()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePattern()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePattern("yyyy.MM.dd G 'at' HH:mm:ss");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the local date/time string to be parsed.
	 */
	static action compilePattern(string format) returns CompiledPattern {
		return CompiledPattern(__plugin.compilePattern(format));
	}
	
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the UTC date/time string to be parsed. 
	 *
	 * You can use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object  
	 * returned by the <tt>compilePatternUTC()</tt> function to make multiple calls using its 
	 * <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternUTC(pattern);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePatternUTC()</tt> function and then the <tt>CompiledPattern</tt> object's
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePatternUTC()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePatternUTC()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternUTC("yyyy.MM.dd G 'at' HH:mm:ss");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the UTC date/time string to be parsed.
	 */
	static action compilePatternUTC(string format) returns CompiledPattern
	{
		return CompiledPattern(__plugin.compilePatternUTC(format));
	}
	 
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the date/time string to be parsed, in the specified timezone. 
	 *
	 * You can then use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object 
	 * returned by the <tt>compilePatternWithTimeZone()</tt> function to make multiple calls 
	 * using its <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternWithTimeZone(pattern, tzone);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePatternWithTimeZone()</tt> function and then the <tt>CompiledPattern</tt> object's 
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePatternWithTimeZone()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePatternWithTimeZone()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternWithTimeZone("yyyy.MM.dd G 'at' HH:mm:ss", "Europe/London");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @param name String that specifies the name of a time zone.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the date/time string to be parsed, in the specified timezone.
	 */
	static action compilePatternWithTimeZone(string format, string name) returns CompiledPattern
	{
		return CompiledPattern(__plugin.compilePatternWithTimeZone(format, name));
	}
	
	/**
	 * Returns a floating point (<tt>float</tt>) timestamp that represents the 
	 * number of seconds since an unspecified epoch (a zero point).
	 *
	 * The timestamp is accurate to one microsecond or better. The return value has no 
	 * necessary relationship to wall time or correlator time and should be used only 
	 * to compare similar timestamps. 
	 *
	 * Because the epoch is unspecified, you should use these timestamps in calculations 
	 * only with other timestamps generated by the <tt>getMicroTime()</tt> function or 
	 * with equivalent high-resolution timestamps generated by an Apama adapter.
	 * 
	 * For example, you might want to use high-resolution timestamps for calculating 
	 * event processing latency in an Apama application. You can compare the timestamps 
	 * across processes on the same machine. The timestamps are not comparable between 
	 * different machines.
	 * 
	 * @returns A floating point (<tt>float</tt>) timestamp that represents the 
	 * number of seconds since an unspecified epoch (a zero point). 
	 */
	static action getMicroTime() returns float 
	{
		return __plugin.getMicroTime();
	}
	
	// Private
	
	/** @private*/ import "TimeFormatPlugin" as __plugin;
}
